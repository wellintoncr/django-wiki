{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django Wiki","text":"<p>A ideia desta wiki \u00e9 apresentar solu\u00e7\u00f5es ou alternativas para problemas encontrados durante o desenvolvimento de aplica\u00e7\u00f5es Django.</p> <p>Isso n\u00e3o \u00e9 um substituto \u00e0 documenta\u00e7\u00e3o do framework de nenhuma forma.</p>"},{"location":"formatter/","title":"Formatadores","text":"<p>Formatadores \u00fateis</p>"},{"location":"formatter/#dinheiro-ou-similares","title":"Dinheiro (ou similares)","text":"<p>No template, coloque: <pre><code>variavel|floatformat:\"2g\"\n</code></pre> A formata\u00e7\u00e3o vai considerar a localiza\u00e7\u00e3o. Supondo que <code>variavel</code> seja 10.33333333, ent\u00e3o, se o locale for portugu\u00eas, o resultado ficar\u00e1 como <code>10,33</code>.</p> <p>Outros exemplos:</p> Valor Sa\u00edda <code>10.366666</code> <code>10,37</code> <code>1234.366666</code> <code>1.124,37</code> <code>10.0</code> <code>10,00</code> <p>O argumento <code>2</code> indica a quantidade de casas decimais (sempre com duas casas decimais, no caso). O <code>g</code> indica que haver\u00e1 agrupamento de milhar de acordo com o locale (em ingl\u00eas americano, por exemplo, o separador \u00e9 <code>,</code>).</p> <p>A documenta\u00e7\u00e3o completa pode ser acessada aqui.</p>"},{"location":"formatter/#forma-humanizada","title":"Forma humanizada","text":"<p>\u00c0s vezes pode ser necess\u00e1rio aplicar uma forma humanizada a algum valor. Para tal, o seguinte setup \u00e9 necess\u00e1rio:</p> <p>Primeiro, verifique se, em <code>settings.py</code>, o app <code>humanize</code> est\u00e1 incluso: <pre><code>INSTALLED_APPS = [\n    ...,\n    \"django.contrib.humanize\",\n]\n</code></pre> No template que ocorrer\u00e1 a convers\u00e3o, carregue o <code>humanize</code>: <pre><code>{% load humanize %}\n(restante do HTML)\n</code></pre> Todas as formas humanizadas abaixo necessitam deste setup.</p> <p>Documenta\u00e7\u00e3o</p>"},{"location":"formatter/#forma-humanizada-de-numeros-grandes-milhao-trilhao-etc","title":"Forma humanizada de n\u00fameros grandes (milh\u00e3o, trilh\u00e3o, etc)","text":"<p>Setup</p> <p>Na vari\u00e1vel a ser transformada, aplique um filtro:</p> <pre><code>variavel|intword\n</code></pre> <p>Alguns exemplos considerando o locale como portugu\u00eas brasileiro:</p> Valor Sa\u00edda <code>1_000</code> <code>1000</code> <code>1_000_000</code> <code>1,0 milh\u00e3o</code> <code>1_200_000</code> <code>1,2 milh\u00f5es</code>"},{"location":"formatter/#forma-humanizada-de-datas-ontem-hoje-e-amanha","title":"Forma humanizada de datas (ontem, hoje e amanh\u00e3)","text":"<p>Setup</p> <p>Na vari\u00e1vel a ser transformada, aplique um filtro:</p> <pre><code>variavel|naturalday\n</code></pre> <p>Alguns exemplos considerando o locale como portugu\u00eas brasileiro e que hoje \u00e9 02/01/2000:</p> Valor Sa\u00edda <code>date(2000, 1, 2)</code> <code>hoje</code> <code>date(2000, 1, 1)</code> <code>ontem</code> <code>date(2000, 1, 3)</code> <code>amanh\u00e3</code> <code>date(2000, 1, 4)</code> <code>04 de Janeiro de 2000</code>"},{"location":"forms/","title":"Formul\u00e1rios","text":"<p>Sem d\u00favidas, os formul\u00e1rios do Django facilitam a entrega de funcionalidades com pouco esfor\u00e7o.</p>"},{"location":"forms/#inputs-de-data","title":"Inputs de data","text":"<p>Existem, basicamente, duas formas de criar inputs de data e a escolha depende, essencialmente, de quem ter\u00e1 o controle das funcionalidades.</p> <ol> <li> <p>A primeira op\u00e7\u00e3o \u00e9 quando o controle de data deve ocorrer pelo navegador:</p> <p><pre><code>date_field = forms.DateField(\n    widget=forms.DateInput(\n        attrs={\n            \"type\": \"date\"\n        }\n    )\n)\n</code></pre> Neste cen\u00e1rio, Django tem pouco controle do que ocorre ali porque <code>DateInput</code> ser\u00e1 um <code>&lt;input type=\"date\"&gt;</code> e o navegador aplicar\u00e1 as regras dele. No Firefox, por exemplo, isso ser\u00e1 renderizado com um bot\u00e3o que permitir\u00e1 o usu\u00e1rio selecionar uma data sem precisar digitar todos os campos.  O navegador decide como exibir o input e como a sele\u00e7\u00e3o de data ocorrer\u00e1 (Firefox no desktop)  O locale do input tamb\u00e9m ficar\u00e1 a crit\u00e9rio do navegador, ent\u00e3o se ele foi configurado para portugu\u00eas brasileiro, provavelmente o padr\u00e3o ser\u00e1 <code>DD/MM/AAAA</code>, mas, se for ingl\u00eas americano, o padr\u00e3o ser\u00e1 <code>MM/DD/AAAA</code>.</p> <p>Observa\u00e7\u00e3o: como o navegador est\u00e1 ciente que o <code>input</code> \u00e9 uma data, ele garante que o que for digitado ser\u00e1 v\u00e1lido no locale do usu\u00e1rio, ou seja, n\u00e3o ser\u00e1 permitido digitar, por exemplo, <code>50/02/2000</code>. Al\u00e9m disso, se o usu\u00e1rio estiver usando um navegador no celular, o seletor nativo ajuda a pessoa a selecionar datas com mais facilidade do que digitar no teclado.  Como um input de data se comporta (Firefox no Android) </p> </li> <li> <p>A segunda op\u00e7\u00e3o \u00e9 colocar o controle do input para o Django:</p> <p><pre><code>date_field = forms.DateField(\n    input_formats=[\"%d/%m/%Y\"],\n    widget=forms.DateInput(),\n)\n</code></pre> Neste cen\u00e1rio, Django tem maior controle do input. No c\u00f3digo acima, <code>input_formats</code> recebe uma lista de poss\u00edveis formas de se inserir a data.</p> <p>Imagine um cen\u00e1rio em que, por algum motivo, se quer exibir o input sempre no padr\u00e3o <code>DD/MM/AAAA</code> independente do locale do navegador do usu\u00e1rio, ent\u00e3o a segunda op\u00e7\u00e3o permitir\u00e1 adicionar essa funcionalidade. O formato poderia ser de outras formas, por exemplo: <code>%m/%y</code> para aceitar apenas m\u00eas e ano (com dois d\u00edgitos).</p> <p> O navegador exibir\u00e1 apenas como um input do tipo <code>text</code>  A desvantagem \u00e9 que, como o navegador n\u00e3o sabe que aquilo \u00e9 um <code>date</code>, ele n\u00e3o consegue fornecer uma ferramenta de sele\u00e7\u00e3o de data. Al\u00e9m disso, um <code>placeholder</code> e possivelmente m\u00e1scara seriam \u00fateis tamb\u00e9m para minimizar essa desvantagem.</p> <p>O exemplo abaixo minimiza esses efeitos: <pre><code>date_field = forms.DateField(\n    input_formats=[\"%m/%d/%Y\"],\n    widget=forms.DateInput(\n        attrs={\n            \"class\": \"form-control\",\n            \"x-mask\": \"99/99/9999\",\n            \"x-data\": \"\",\n            \"placeholder\": \"DD/MM/AAAA\",\n            \"type\": \"text\" # (1)\n        }\n    )\n)\n</code></pre></p> <ol> <li><code>type text</code> \u00e9 o valor padr\u00e3o, ent\u00e3o \u00e9 opcional informar. Se quiser o tipo <code>date</code>, ent\u00e3o \u00e9 obrigat\u00f3rio informar.</li> </ol> <p>Observa\u00e7\u00e3o: o exemplo acima n\u00e3o garante que o usu\u00e1rio digite uma data inv\u00e1lida, por exemplo <code>90/60/0001</code>, apenas aplicar\u00e1 uma m\u00e1scara que impede caracteres diferentes de n\u00fameros de serem digitados.</p> <p>Na valida\u00e7\u00e3o do Django, isso ser\u00e1 barrado, mas o usu\u00e1rio ter\u00e1 a liberdade de digitar o que quiser - isso n\u00e3o ocorre com a primeira op\u00e7\u00e3o porque o navegador sabe que n\u00e3o existe um m\u00eas <code>60</code>, por exemplo.</p> </li> </ol>"},{"location":"models/","title":"Models","text":"<p>O sistema de modelagem do Django \u00e9 bem completo e possui diversas fun\u00e7\u00f5es \u00fateis. Abaixo est\u00e3o listadas algumas funcionalidades interessantes.</p> <p>Como alguns trechos de c\u00f3digo podem depender de qual banco de dados est\u00e1 sendo usado, este documento considera o Postgres. Caso esteja usando outro tipo, verifique a compatibilidade dos comandos.</p>"},{"location":"models/#view","title":"View","text":"<p>Pode ser que voc\u00ea queira usar uma view na sua aplica\u00e7\u00e3o. Voc\u00ea pode realizar esse processo de duas formas:</p> <ol> <li> <p>Manual: voc\u00ea precisa acessar o banco de dados, executar o SQL que cria a view e, na aplica\u00e7\u00e3o Django, executar um raw SQL quando precisar de algum dado da view;</p> </li> <li> <p>Integrado: voc\u00ea criar\u00e1 uma migra\u00e7\u00e3o customizada e adicionar\u00e1 um modelo na aplica\u00e7\u00e3o. Quando precisar dos dados da view, basta acessar o modelo.</p> </li> </ol> <p>A forma manual \u00e9 complicada porque necessita que voc\u00ea entre em cada banco de dados e execute o mesmo SQL (imagine fazendo isso em ambiente local, homologa\u00e7\u00e3o e produ\u00e7\u00e3o), al\u00e9m de necessitar executar um raw SQL na aplica\u00e7\u00e3o Django - dificultando bastante o uso de recursos nativos, como uma ListView que pagina os resultados automaticamente.</p> <p>Dessa forma, o foco \u00e9 realizar esta opera\u00e7\u00e3o de forma integrada.</p>"},{"location":"models/#forma-integrada","title":"Forma integrada","text":"<p>Comece criando um arquivo de migra\u00e7\u00e3o. Na pasta <code>migrations</code>, crie um arquivo que vem ap\u00f3s a \u00faltima migra\u00e7\u00e3o.</p> <p>Para exemplificar, considere que a \u00faltima migra\u00e7\u00e3o foi <code>0010_create_model.py</code>. A migra\u00e7\u00e3o que voc\u00ea deve criar \u00e9 <code>0011_create_view.py</code> (o que vem ap\u00f3s <code>0011_</code> \u00e9 irrelevante).</p> <p>Os dois exemplos de implementa\u00e7\u00e3o se diferenciam no tipo de view criada.</p> <p>Uma view comum (ou virtual) \u00e9 simplesmente um jeito de rodar uma query de outra forma, exemplo: <pre><code>SELECT id, price FROM product;\n</code></pre></p> <p>E uma view pode ser simplesmente acessar os produtos que est\u00e3o ativos: <pre><code>CREATE VIEW my_view AS SELECT id, price FROM product WHERE status = 'active';\n</code></pre></p> <p>Ent\u00e3o, ao fazer um SELECT de <code>my_view</code>, apenas os produtos ativos estar\u00e3o presentes enquanto que a tabela <code>product</code> conter\u00e1 todos os produtos (ativos ou n\u00e3o). Caso algum produto seja alterado, <code>my_view</code> ser\u00e1 automaticamente atualizada - por baixo dos panos, a query original ser\u00e1 executada, ent\u00e3o os registros sempre estar\u00e3o atualizados.</p> <p>Por\u00e9m, pode ser que voc\u00ea tenha muitos dados a serem processados e \u00e9 necess\u00e1rio realizar algum tipo de cache. Neste caso, uma view materializada \u00e9 uma op\u00e7\u00e3o.</p> <p>Quando a view \u00e9 criada, ela \u00e9 executada e os resultados ficam armazenados no banco de dados. Caso algum registro mude, a view n\u00e3o \u00e9 atualizada automaticamente. Para que os dados da view sejam sincronizados com os registros da query original, \u00e9 necess\u00e1rio executar um comando espec\u00edfico.</p> <p>Independente de qual tipo de view ser\u00e1 usada, voc\u00ea precisa especificar o par\u00e2metro sql de RunSQL e, opcionalmente, reverse_sql pode ser especificado para ser usado caso seja necess\u00e1rio reverter a migra\u00e7\u00e3o.</p>"},{"location":"models/#view-comum","title":"View comum","text":"<p>Neste arquivo novo, crie um SQL que vai gerar a view:</p> 0011_create_view.py<pre><code>from django.db import migrations\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0010_create_model\"),\n    ]\n\n    operations = [\n        migrations.RunSQL(\n            sql=\"\"\"\n            CREATE VIEW app_view_name AS\n            (\n                SELECT o.price, o.id\n                FROM app_order o\n            );\n            \"\"\",\n            reverse_sql=\"\"\"\n            DROP VIEW IF EXISTS app_view_name;\n            \"\"\",\n        ),\n    ]\n</code></pre>"},{"location":"models/#view-materializada","title":"View materializada","text":"<p>Neste arquivo novo, crie um SQL que vai gerar a view:</p> 0011_create_view.py<pre><code>from django.db import migrations\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0010_create_model\"),\n    ]\n\n    operations = [\n        migrations.RunSQL(\n            sql=\"\"\"\n            CREATE MATERIALIZED VIEW app_view_name AS\n            (\n                SELECT o.price, o.id\n                FROM app_order o\n            );\n            CREATE UNIQUE INDEX app_order_id ON app_view_name (id);\n            \"\"\",\n            reverse_sql=\"\"\"\n            DROP MATERIALIZED VIEW IF EXISTS app_view_name;\n            \"\"\",\n        ),\n    ]\n</code></pre> <p>Neste caso, voc\u00ea tamb\u00e9m precisar\u00e1 de alguma rotina que far\u00e1 o sincronismo dos dados. Isso pode ser feito atrav\u00e9s de um script localizado na pasta <code>app/management/commands</code> (sendo <code>app</code> o nome do app). Segue um exemplo:</p> sync_materialized_view.py<pre><code>from django.core.management.base import BaseCommand\nfrom django.db import connection\n\n\nclass Command(BaseCommand):\n    def handle(self, *args, **options):\n        with connection.cursor() as cursor:\n            cursor.execute(f\"REFRESH MATERIALIZED VIEW CONCURRENTLY app_view_name;\")\n</code></pre> <p>No comando acima, aten\u00e7\u00e3o ao <code>CONCURRENTLY</code> porque indica que o banco de dados n\u00e3o travar\u00e1 SELECTs concorrentes, permitindo que a\u00e7\u00f5es de SELECT possam ocorrer durante a sincroniza\u00e7\u00e3o. Por\u00e9m, para que isso seja poss\u00edvel, \u00e9 necess\u00e1rio que haja pelo menos um \u00edndice na view (o exemplo do arquivo de migra\u00e7\u00e3o cont\u00e9m o trecho que cria este \u00edndice).</p> <p>Caso n\u00e3o seja poss\u00edvel criar o \u00edndice, n\u00e3o coloque <code>CONCURRENTLY</code> e tenha ci\u00eancia que, durante a sincroniza\u00e7\u00e3o, o view estar\u00e1 inacess\u00edvel.</p> <p>Obviamente, existe um pre\u00e7o a ser pago: adicionar o modo concorrente pode aumentar o tempo de execu\u00e7\u00e3o, ent\u00e3o avalie o seu caso antes de escolher qual op\u00e7\u00e3o usar.</p>"},{"location":"models/#modelo","title":"Modelo","text":"<p>Uma vez efetuada a cria\u00e7\u00e3o da migra\u00e7\u00e3o, modifique o arquivo de modelos e adicione a nova view: models.py<pre><code>class MyView(models.Model):\n    id = models.BigIntegerField(primary_key=True)\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n\n    class Meta:\n        db_table = \"app_view_name\"\n        managed = False\n</code></pre> Do exemplo acima, o mais importante \u00e9 definir corretamente o <code>db_table</code> para ter o mesmo nome da view e <code>managed = False</code> para que o Django n\u00e3o tente criar as tabelas e somente vincular ao <code>db_table</code> informado. Feito isso, execute <code>python manage.py makemigrations</code>.</p>"}]}